using System.Threading.Tasks;using System.Windows.Input;using Plugin.Fingerprint;using Plugin.Fingerprint.Abstractions;using SSICPAS.Core.Data;using SSICPAS.Models;using Xamarin.Forms;using SSICPAS.Data;using SSICPAS.Services;using SSICPAS.Services.Interfaces;using SSICPAS.Services.Navigation;using SSICPAS.Configuration;namespace SSICPAS.ViewModels.Onboarding{    public class VerifyPinCodeViewModel : BasePinCodeViewModel    {        private static int _maxAttempts = 5;        private PinCodeBiometricsModel pinCodeModel;        private ISecureStorageService<PinCodeBiometricsModel> _pinCodeService;        private IDialogService _dialogService;        private int _currentAttempts;        private IUserService _userService;        public static string MainTextVerify => "PINCODE_LOGIN".Translate();        public static string SubtitleText1Verify => "PINCODE_LOGIN_SUBTEXT".Translate();        public static string SubText4Verify => "PINCODE_LOGIN_FORGET".Translate();        public static string VerifyErrorSubText => "PINCODE_LOGIN_ERROR_TEXT".Translate();        public static string AlertDescription => "LOGIN_WITH_NEMID_DESC".Translate();        public static string AlertButton => "LOGIN_WITH_NEMID".Translate();        public static string SuccessAlert => "SUCCESS".Translate();        public static string SuccessAlertMessage => "BIOMETRIC_NEXT_TIME".Translate();        public ICommand FingerPrintCommand => new Command(async () => await ExecuteOnceAsync(BiometricsButtonClicked));        public ICommand ResetPassword => new Command(async () => await ExecuteOnceAsync(ForgetPassword));        public bool IsBiometricEnabled        {            get            {                return _isBiometricEnabled;            }            set            {                _isBiometricEnabled = value;                OnPropertyChanged(nameof(IsBiometricEnabled));            }        }                public string MainText { get; set; } = MainTextVerify;        private bool _isBiometricEnabled = true;        private string _subTitle1;        public string SubTitle1        {            get            {                return _subTitle1;            }            set            {                _subTitle1 = value;                OnPropertyChanged(nameof(SubTitle1));            }        }        private string _subText4;        public string SubText4        {            get            {                return _subText4;            }            set            {                _subText4 = value;                OnPropertyChanged(nameof(SubText4));            }        }        public bool VisibleBackButton { get; set; } = false;        public static VerifyPinCodeViewModel CreateVerifyPinCodeViewModel()        {            return new VerifyPinCodeViewModel(                IoCContainer.Resolve<ISecureStorageService<PinCodeBiometricsModel>>(),                IoCContainer.Resolve<IDialogService>(),                IoCContainer.Resolve<IUserService>(),                IoCContainer.Resolve<IDeviceFeedbackService>()            );        }        public VerifyPinCodeViewModel(ISecureStorageService<PinCodeBiometricsModel> pinCodeService,             IDialogService dialogService,             IUserService userService,            IDeviceFeedbackService deviceFeedbackService) : base(deviceFeedbackService)        {            _pinCodeService = pinCodeService;            _dialogService = dialogService;            _userService = userService;            VisibleFingerPrint = true;            Init();        }        public void Init()        {            Setup();                        Device.BeginInvokeOnMainThread(async () =>            {                await SetupData();                await HasBiometricsFirst();            });        }        private void Setup()        {            _subTitle1 = SubtitleText1Verify;            ErrorText = VerifyErrorSubText;            VisibleFingerPrint = true;            VisibleSubtext1 = false;            VisibleSubtext2 = false;            VisibleSubtext3 = false;            VisibleSubtext4 = true;            _subText4 = SubText4Verify;        }        public override void PinButtonClicked(string character)        {            base.PinButtonClicked(character);            if (CurrentPinCompleted())            {                Device.BeginInvokeOnMainThread(async () => await VerifyPinCode());            }        }        private async Task BiometricsButtonClicked()        {            bool isFingerprintAvailable = await CrossFingerprint.Current.IsAvailableAsync(false);                        if (!isFingerprintAvailable)            {                await _dialogService.ShowAlertAsync(Error, BioNotRegistered, true, true, StackOrientation.Horizontal, BioDismiss, null);                return;            }            if (pinCodeModel.HasBiometrics)            {                await BiometricAuthentication();            }            if (!pinCodeModel.HasBiometrics && isFingerprintAvailable)            {                await RegisterBiometrics();            }        }        private async Task BiometricAuthentication()        {            AuthenticationRequestConfiguration config = new AuthenticationRequestConfiguration(BioConfirmIdentity, BioAndroidSubTitle);            var authResult = await CrossFingerprint.Current.AuthenticateAsync(config);                        if (authResult.Authenticated)            {                await VerifyPinCodeSucceeded();            }            else            {                await IncreaseAttempts();                                if (_currentAttempts >= _maxAttempts)                {                    await ResetStorage();                }            }        }        private async Task RegisterBiometrics()        {            AuthenticationRequestConfiguration config = new AuthenticationRequestConfiguration(BioConfirmIdentity, BioAndroidSubTitle);            var authResult = await CrossFingerprint.Current.AuthenticateAsync(config);            if (authResult.Authenticated)            {                pinCodeModel.HasBiometrics = true;                await _pinCodeService.SetSecureStorageAsync(SecureStorageKeys.PIN_LOCATION, pinCodeModel);                await Task.Delay(800);                await _dialogService.ShowAlertAsync(SuccessAlert, SuccessAlertMessage, true, true, StackOrientation.Horizontal, BioDismiss, null);                _isBiometricEnabled = false;                OnPropertyChanged(nameof(IsBiometricEnabled));            }        }        private async Task HasBiometricsFirst()        {            pinCodeModel = await _pinCodeService.GetSecureStorageAsync(SecureStorageKeys.PIN_LOCATION);            if (pinCodeModel.HasBiometrics)            {                await BiometricAuthentication();            }        }        private async Task VerifyPinCode()        {            string storagePin = pinCodeModel.PinCode;            await IncreaseAttempts();                        if (PinCode == storagePin)            {                await VerifyPinCodeSucceeded();            }            else            {                if (_currentAttempts >= _maxAttempts)                {                    await ResetStorage();                }                else                {                    VerifyPinCodeFailed();                }            }        }        private void VerifyPinCodeFailed()        {            PinCode = "";            VisibleErrorText = true;            OnPropertyChanged(nameof(VisibleErrorText));            UpdateBullets(true);            PerformVibration();        }        private async Task VerifyPinCodeSucceeded()        {            pinCodeModel.Attempts = 0;            await _pinCodeService.SetSecureStorageAsync(SecureStorageKeys.PIN_LOCATION, pinCodeModel);            await _navigationService.OpenTabbar();        }        private async Task ResetStorage()        {            await _userService.UserLogoutAsync(false, false);            await _navigationService.GoToErrorPage(Errors.LockError);        }        private async Task ForgetPassword()        {            await _userService.UserLogoutAsync();        }        public override async Task OnHelpButtonClicked()        {            await Task.CompletedTask;        }        private async Task SetupData()        {            pinCodeModel = await _pinCodeService.GetSecureStorageAsync(SecureStorageKeys.PIN_LOCATION);            _currentAttempts = pinCodeModel.Attempts;        }        private async Task IncreaseAttempts()        {            pinCodeModel.Attempts++;            _currentAttempts = pinCodeModel.Attempts;            await _pinCodeService.SetSecureStorageAsync(SecureStorageKeys.PIN_LOCATION, pinCodeModel);        }    }}