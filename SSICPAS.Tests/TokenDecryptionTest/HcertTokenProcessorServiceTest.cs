using Moq;
using NUnit.Framework;
using SSICPAS.Configuration;
using SSICPAS.Core.Logging;
using SSICPAS.Core.Services.DecoderService;
using SSICPAS.Core.Services.Enum;
using SSICPAS.Core.Services.Interface;
using SSICPAS.Core.Services.Model.Converter;
using SSICPAS.Core.Services.Model.CoseModel;
using SSICPAS.Services.Interfaces;
using SSICPAS.Services.Translator;
using SSICPAS.Services.WebServices;
using SSICPAS.Tests.TestMocks;
using System.IO;
using System.Reflection;
using System.Threading.Tasks;
using DCCVersion_1_3_0 = SSICPAS.Core.Services.Model.EuDCCModel._1._3._0;

namespace SSICPAS.Tests.TokenDecryptionTest
{
    public class HcertTokenProcessorServiceTest
    {
        private HcertTokenProcessorService verifier;
        private Mock<ICertificationService> MockCertificationService { get; set; }

        public HcertTokenProcessorServiceTest()
        {
            IoCContainer.RegisterInterface<ILoggingService, MockLoggingService>();
            IoCContainer.RegisterInterface<IDateTimeService, MockDateTimeService>();
            
            MockCertificationService = new Mock<ICertificationService>();
            MockCertificationService.Setup(x => x.VerifyCoseSign1Object(It.IsAny<CoseSign1Object>()));
            
            verifier = new HcertTokenProcessorService(MockCertificationService.Object,
                IoCContainer.Resolve<ILoggingService>(),
                IoCContainer.Resolve<IDateTimeService>());

            var MockRatListService = new Mock<IRatListService>();
            MockRatListService.Setup(t => t.GetRatList()).Returns(Task.Run(async () =>
            {
                var assembly = typeof(RatListService).GetTypeInfo().Assembly;
                Stream ratlistStream = assembly.GetManifestResourceStream("SSICPAS.Valuesets.ratlist.json");
                using (var reader = new StreamReader(ratlistStream))
                    return await reader.ReadToEndAsync();
            }));
            MockRatListService.Setup(t => t.GetDCCValueSet()).Returns(Task.Run(async () =>
            {
                var assembly = typeof(RatListService).GetTypeInfo().Assembly;
                Stream valuesetsStream = assembly.GetManifestResourceStream("SSICPAS.Valuesets.valueset.json");
                using (var reader = new StreamReader(valuesetsStream))
                    return await reader.ReadToEndAsync();
            }));

            IDCCValueSetTranslator translator = new DCCValueSetTranslator(MockRatListService.Object);
            IDCCValueSetTranslator testmanufacturerTranslator = new DigitalCovidValueSetTestAndTestManufacturerNameTranslator(MockRatListService.Object);
            verifier.SetDCCValueSetTranslator(translator, testmanufacturerTranslator).Wait();
        }
        

        [Test]
        public async Task TestDecode_CanDecode_EC256()
        {
            //This test does not validate the signature, it just test the decoding part
            string prefixCompressedCose =

            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            //because this token is expired
            Assert.AreNotEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        [Test]
        public async Task TestDecode_CanDecode_RSA2048()
        {
            //This test does not validate the signature, it just test the decoding part
            string prefixCompressedCose =

            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            //because this token is expired
            Assert.AreNotEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        
        [Test]
        public async Task TestDecode_CanDecode_RSA3072()
        {
            //This test does not validate the signature, it just test the decoding part
            string prefixCompressedCose =
                "HC1:NCF*90*C0/3WUWGVLK6796/9R5M5/GWMBH479CKM603XK2F3O8J0.42F3O%I+-4/IC6TAY50.FK6ZK7:EDOLFVC*70B$D% D3IA4W5646946846.966KCN9E%961A69L6QW6B46XJCCWENF6OF63W5KF60A6WJCT3ETB8WJC0FDU56:KEPH7M/ESDD746IG77TA$96T476:6/Q6M*8CR63Y8R46WX8F46VL6/G8SF6DR64S8+96D7AQ$D.UDRYA 96NF6L/5SW6Y57+EDB.D+Y9V09HM9HC8 QE*KE0ECKQEPD09WEQDD+Q6TW6FA7C46TPCBEC8ZKW.CNWE.Y92OAGY82+8UB8-R7/0A1OA1C9K09UIAW.CE$E7%E7WE KEVKER EB39W4N*6K3/D5$CMPCG/DA8DBB85IAAY8WY8I3DA8D0EC*KE: CZ CO/EZKEZ96446C56GVC*JC1A6NA73W5KF6TF6FBBF9GJ/98:FGYB25F$4VPO9$GO7ECN:S5T3TDHU*0ZLB5CR WLYXPN:BHRSAUEJP7:6F3D2MD80QGSQ7*F8TX1OVMW7AIJ1RG4DOLJ 983U9NR+XG.A1L8CPXHB1AD8DPU3OY94WAX.B.UD9ZSPIG7TV2NMFKKE9L:+H5XQN60ULCD.9CK9:5P-+SWCJ Q6+JCVMT:2IK2HW4884UAJ1:HA+FN /CJ%TI-O1PR.IH-R6GJ5EDW7UTAIOC5RO4JZT0Y1G/W57M49JUX178X010T$B1*OG1.N/9R5*A L9:S8JR2WU4:72U7K8SI*AAS1JNLJHZUWSNB3UC/MM%CBDH$N88UM0.VQPBLML6BKE9F0S7FXQJADXOED/H%.5+:7K%5ZBK$HUH/LX074%9+RMDRDH7Q:G3E4J$LK+6I5/IJ+0U58RSLSBW.AKVZT ANOLQZW720F-%4WZV*SOHX52J0JM3F3GPFPHZKSAB6KKGV9$RJ00G:O08Z4GP3FGEU$OCOSE3HY VD05.FK 7L893VZH0RG*Q36YF7B25AR650M+8G6B$6CLOE+EFV/OE:0O*JP26X48H1";
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            //because this token is expired
            Assert.AreNotEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        [Test]
        public async Task TestDecode_Faulty_COSE()
        {
            string prefixCompressedCose =
                "HC1:NCFC:MQ.NAP2H432EEY.G61FXR4.N2IMJ1*GK7US4F47VYVJ+7TF:8YLE8S4V-80GF4+5$XSW27N*J6D2S9IK*D/G9RP2E$SIIO6MHANJBV4HXK7FAS+86T5.%VIWB+KM6VM8DFG:NDN7VEQXXNBIU%JK2SH.-A%5E*LFK$QPR5:1O$56ESL+8W:WCM33RET+.L0UC TMFCB77IO0IL4HS6N:F79-1.ZT.QGM5AUC1+I3RMRBPBSFFWWA+S9S%5IZS/731QABSR5NKF2NO62Y+6 $HWZEN/RP 4 EB29UV0Z0IRKQ6TB-W28VAG2JCMHCCA9ALK4RHZHDCO-%1GF9M0LC5GU3P:40510H*9S:M%0K3QLIF57+I0*UZMAV 2TJ761OY RF10IMKE06Z$Q3V960IQXVM+9*UR9WH$DC18BH0GLBJC$4Z-FVX1SCVD-Q -3MTGC8AP1QO:6GXECZBV*1%78BMKEX2XNI7%6QGO2X8DGB8DETFM0JQA/2B+5YMBX$S2/52X0E-O/8RR*8PW7T:TYYRLWFZ62KTVDJTLTQ3BR$4E65NL-5+UP%8M14AS0C88NM%AQZFF+FCGWM3U42963UC27$Q8Y7S3VH19P$BO%*1R4K5.UT1";
            
            
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        [Test]
        public async Task TestDecode_Faulty_CBOR()
        {
            string prefixCompressedCose =

                
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        [Test]
        public async Task TestDecode_KidHeaderInUnProtectedHeader()
        {
            string prefixCompressedCose =

                
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            //because this token is expired
            Assert.AreNotEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        
        [Test]
        public async Task TestDecode_Unknown_Prefix()
        {
            string prefixCompressedCose =

                
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        
        [Test]
        public async Task TestDecode_FaultyBase45()
        {
            string prefixCompressedCose =

                
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        [Test]
        public async Task TestDecode_FaultyCompressor()
        {
            string prefixCompressedCose =
                "HC1:C/A-H96N11UV/4UC-NIMUZT3V6IS TN0ULQCZO8ZXITMV85GO8EG JL2L51S*D56XJWAV/ NO 5OQU *NG1S/.F+5GE:RU5O1EU$%7T.F%BFVV70GAYUH 583JFJOT*HUTT03M0G F*C4YTLL$24KQ8$AJKLBVQZ 1-7TE1GTU44IVF%RI5G+P2HTQI4F4TA63WHKLYF00O3DMDCM7-P24X0GFEPGUCT8G5HKEE3J9%G9SCOYGU8GUN-S$KK6OFP80H56%889T1T-G%BRM7DQ68P00 HE7O7.W3YKIK10XEPL1PEQDF-BWBB%-9W4B7W91*J$IA7Z6ND9XQ4M09NT1PC43/RWG5C.2TSB:66UG3WX8.0I RPGWE2Z9+*GH08%0R$-2S838 A2UTK45IB9+B7 9SFOKXDI3Y9+NF:$4YV6*PPEYR0-45-P5OR9.NKVK XTFWVV5E IMLSKRG6TZUX/U%D78HVTZJX11J:AVKDTVULAW0PSP9W%*I6MDRIR+44K5GT*G0CHMDHS7B5GBIHAH%3X*A0:4ZJGIHH1 GIOR+SIX5VD0PZAUH:3 EK P8.T6LM4RFL2ANMWM9CU$UE8+IC54OS01+HYS1VFE:237Q2Z:NO:MU2";
                
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        [Test]
        public async Task TestDecode_NoopCompressor()
        {
            string prefixCompressedCose =
                "HC1:RRQT 9GO0+$F%47N23.G2O609CKIA03XK4F35KC:CE2F3EFG2LU/IC6TAY50.FKP1LLWEYWEYPCZ$E7ZKPEDMHG7ECMUDQF60R6BB87M8BL6-A6HPCTB8IECDJCD7AW.CXJD7%E7WE KEVKEZ$EI3DA8D0EC*KE: CZ CGVC*JC1A6NA73W5KF6TF6$PC1ECFNGGPCEVCD8FI-AIPCZEDIEC EDM-DKPCG/DZKE/34QEDA/DOCCQF6$PCEEC5JD%96IA7B46646WX6JECFWEB1A-:8$966469L6OF6WX6F$DP9EJY8L/5M/5546.96VF6YPC4$C+70AVCPQEX47B46IL6646I*6UPCZ$ETB8RPC24EQ DPF6BW5E%6Z*83W5746JPCIEC6JD846Y968464W5Z57HWE/TEEOL2ECY$D9Q31ECOPC..DBWE-3EB441$CKWEDZCQ-A1$C..D734FM6K/EN9E%961A69L6QW6B46GPC8%E% D3IA4W5646946846.96SPC3$C.UDRYA 96NF6L/5SW6Z57LQE+CEJPC+EDQDD+Q6TW6FA7C46IPC34E/IC3UA*VDFWECM8KF6 590G6A*8746C562VCCWENF6OF63W56L6*96ZPC24EOD0P/EH.EY$5Y$5XPCZ CJAG8VCOPCPVC..49A61TAOF6LA7WW68463:6QF6A46UF6+Q6RF6//6SF6H%6NF6SF6646.Q627B5JQ0H3/.HJ2S%3U7SKVGH835.R7JL24/N$5TJZ2V32NCUPSOAWNNJSY$23RS+5TT4M862*O6IPDVZ8L1P0FQR6KHFC9Z7VDF";
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        [Test]
        public async Task TestDecode_DK1()
        {
            string prefixCompressedCose =

            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreNotEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        
        [Test]
        public async Task TestDecode_DK2()
        {
            string prefixCompressedCose =

            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreNotEqual(result.ValidationResult, TokenValidateResult.Invalid);
        }
        
        [Test]
        public async Task TestDCC1_0_x_isValid()
        {
            // dob is a proper date
            string prefixCompressedCose =

            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreNotEqual(TokenValidateResult.Invalid, result.ValidationResult);
        }
        
        [Test]
        public async Task TestDCC1_0_x_isInvalid()
        {
            // dob is a string instead of date
            string prefixCompressedCose =

            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreEqual(TokenValidateResult.Invalid, result.ValidationResult);
        }
        
        [Test]
        public async Task TestDCC1_3_0_wasValidIn1_0_x_ShouldBeValidIn1_1_0()
        {
            // dob is a proper date
            string prefixCompressedCose =

            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreNotEqual(TokenValidateResult.Invalid, result.ValidationResult);
        }
        
        [Test]
        public async Task TestDCC1_3_0_wasInvalidIn1_0_x_ShouldBeValidIn1_1_0()
        {
            // dob is a string instead of date
            string prefixCompressedCose =

            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreNotEqual(TokenValidateResult.Invalid, result.ValidationResult);
        }

        [Test]
        public async Task TestDCC1_3_0_wasValidIn1_0_x_ShouldBeValidIn1_2_0()
        {
            // dob is a proper date
            string prefixCompressedCose =

            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreNotEqual(TokenValidateResult.Invalid, result.ValidationResult);
        }
        
        [Test]
        public async Task TestDCC1_3_0_wasInvalidIn1_0_x_ShouldBeValidIn1_2_0()
        {
            // dob is a string instead of date
            string prefixCompressedCose =
                "HC1:NCFOXN%TS3DH3ZSUZK+.V0ETD%65NL-AH3%QIOO6+I8NE/N0GJL*SC..4K$4C:GPF6R:5SVBHABVCN395R4IL95OD6%28%%BPHQOGO3IRIHPQT69YLLYP-HQLTQV*OOGOBR7L*K1UPH65%PDGZK*9DJZIM-1/24BD7WOOCU6O8QGU68ORJSPZHQ5D6ZSPQGO7HO0SOGIR1TQWNQ01RL1RE+QLTQV0Q.NRI+Q%MPCSOKAB795Z6NC8P$WA3AA9EPBDSM+QFE4IWMEK81:6G16IFNPCL694F$9DK4LC6DQ4939HHM 55ZIJFVA.QO5VA81K0ECM8C%P12MHSKE MCTPI8%MIMIBDSUES$8RZ6N*8PBL3C7GKGS$0AY6F*DK8%MRIA:EKT*QR$M% OP*B9YOB*16CQJN9TW5F/94O5 9E6UEDTUD1VVY95CQ-8EDS9%PP%.P3Y9UM97H98$QP3RF69AKPOK9799.MP06I+79HGDB55385:*SGNQ-CUFI9N9L.D6531AFUR1CH$U5C5$BQ6FU-RV-PT*2II-RQGU8-VM*R4.PKPCZPG/5W5 2IDSPKU6:96G7C+I$00B%2H2";
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreNotEqual(TokenValidateResult.Invalid, result.ValidationResult);
        }
        
        [Test]
        public async Task TestDCC1_3_0_wasValidIn1_0_x_ShouldBeValidIn1_3_0()
        {
            // dob is a proper date
            string prefixCompressedCose =
                "HC1:NCFOXN%TS3DH3ZSUZK+.V0ETD%65NL-AH-R6IOO6+I2LEUA38WA$FE%I6AT4V22F/8X*G3M9JUPY0BX/KR96R/S09T./0LWTKD33236J3TA3M*4VV2 73-E3GG396B-43O058YIB73A*G3W19UEBY5:PI0EGSP4*2DN43U*0CEBQ/GXQFY73CIBC:G 7376BXBJBAJ UNFMJCRN0H3PQN*E33H3OA70M3FMJIJN523.K5QZ4A+2XEN QT QTHC31M3+E32R44$28A9H0D3ZCL4JMYAZ+S-A5$XKX6T2YC 35H/ITX8GL2-LH/CJTK96L6SR9MU9RFGJA6Q3QR$P2OIC0JVLA8J3ET3:H3A+2+33U SAAUOT3TPTO4UBZIC0JKQTL*QDKBO.AI9BVYTOCFOPS4IJCOT0$89NT2V457U8+9W2KQ-7LF9-DF07U$B97JJ1D7WKP/HLIJLKNF8JFHJP7NVQ7ACQJFG34S8XUFJ.F5CASDRQVV*ISI%PV7LR:7KCJYFOP U5VTV+K+/HQ9F05E4G5.L6L496FAH6QAEF%UQ8.NK6WA5NYTQV2P KJ/O6VR94NUK$7$*03VJ*NH";
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreNotEqual(TokenValidateResult.Invalid, result.ValidationResult);
        }
        
        [Test]
        public async Task TestDCC1_3_0_wasInvalidIn1_0_x_ShouldBeValidIn1_3_0()
        {
            // dob is a string instead of date
            string prefixCompressedCose =
                "HC1:NCFOXN%TS3DH3ZSUZK+.V0ETD%65NL-AH3%QIOO6+I8NE/N0GJL*SC..4K$4C:GPF6R:5SVBHABVCN395R4IL95OD6%28%%BPHQOGO3IRIHPQT69YLLYP-HQLTQV*OOGOBR7L*K1UPH65%PDGZK*9DJZIM-1/24BD7WOOCU6O8QGU68ORJSPZHQ5D6ZSPQGO7HO0SOGIR1TQWNQ01RL1RE+QLTQV0Q.NRI+Q%MPCSOKAB795Z6NC8P$WA3AA9EPBDSM+QFE4IWMEK81:6G16IFNPCL694F$9DK4LC6DQ4939HHM 55ZIJFVA.QO5VA81K0ECM8C%P12MHSKE MCTPI8%MIMIBDSUES$8RZ6N*8PBL3C7GKGS$0AY6F*DK8%MRIA:EKT*QR$M% OP*B9YOB*16CQJN9TW5F/94O5 9E6UEDTUD1VVY95CQ-8EDS9%PP%.P3Y9UM97H98$QP3RF69AKPOK9799.MP06I+79HGDB55385:*SGNQ-CUFI9N9L.D6531AFUR1CH$U5C5$BQ6FU-RV-PT*2II-RQGU8-VM*R4.PKPCZPG/5W5 2IDSPKU6:96G7C+I$00B%2H2";
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreNotEqual(TokenValidateResult.Invalid, result.ValidationResult);
        }

        [Test]
        public async Task TestDCC1_3_0_TestedUserHasNoDRField_ShouldBeValidIn1_2_0()
        {
            // dob is a proper date
            string prefixCompressedCose =

            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreNotEqual(TokenValidateResult.Invalid, result.ValidationResult);
        }
        
        [Test]
        public async Task TestDCC1_3_0_TestedUserHasNoDRField_ShouldBeValidIn1_3_0()
        {
            // dob is a proper date
            string prefixCompressedCose =

            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreNotEqual(TokenValidateResult.Invalid, result.ValidationResult);
        }

        [Test]
        public async Task TestDCC1_3_0_DK3MyPageTokenWithTests_ShouldBeValidIn1_3_0()
        {
            string prefixCompressedCose =

            var result = await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreNotEqual(TokenValidateResult.Invalid, result.ValidationResult);
            Assert.True(result.DecodedModel is DCCVersion_1_3_0.DCCPayload);
        }

        [Test]
        public async Task TestDCC1_3_0_DK3MyPageTokenWithTests_XDUIsPresentForEachTest()
        {
            // dob is a proper date
            string prefixCompressedCose =
                "DK3:NCF$/LW08BK2/53YFE-$A-0S147KE0.ZMF4KJ-F%1WOLOPEUEQF+I8OWAAUAKP7FXNF.M3FDV-G0*HUXT046GD1GB86/0FENTEEQ75R*AIZJLMG579+N2K5H$PNW+9OC13F2M4TRAQ3ASKBNQG5:FDVDNU4WLDLDCET*R+K3R NL%5:0TTMQSYOO9M/SK43C0NJH9U+VPHCQ/.1EQG0LRBSE8KD48U5NA.00CDL-LO8 KT 24*RPS00VTM Q9$1TFI1F00VHRVFX11 OM9DI./6FF5+$9:MU6E6VAR1U7VZF:7I:0I+:6RIH X39XV:O42B1EKKIBGAA00GOZ:HI60ZVN478CQU*XD4FQ%MB*JFP72D7AR90788.G2ZDOZN2AF0LVJ89R6USOC2J714M3F1G0.TM1I+7EXA2%VM5Y5TC5NI9UNGBBK-67AT69ETOM5KAA:368%UQOH/Q4AH2%LILZ1.*9K71N2NDEPBH8+JL-.VM246G69D12GG6K6Q5UAPPR949MC.6QP.6KW9/JA3A462O+416P37+GO58A*2VIIY43EDB8F6P56XXC4SP/87HHOXEFL3199RGQ11J8U.3 :IM 9URG3QN*953/I8XG.N53D62LR-BK937XO1E923667Q8V$0Z.F VDLO0STC0ZDQ/70PAW+N1T5T.J37WEQDK.LL$616M5Z69/AFSR QQSX4%N541IU.MH.389LQPAAFE.2TALNFSNZ/QN2T3L9HFBZG3CYKE4M:MFUT6PVC:L5%Y8CMIBTO/R2J3O9GWP7R3OUQPG57F+4I*/HP4UU9OM1SFAUH5CTWVL3DH$VN0OYCT*7HVM2L1KX7IU1RE2UCESF67QQEC29O/FA1VA3MD-CU%VO/LF7N";
            var result = await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            var resultDCC = result.DecodedModel as DCCVersion_1_3_0.DCCPayload;

            foreach (var test in resultDCC.DCCPayloadData.DCC.Tests) {
                Assert.NotNull(test.CBSDefinedExpirationTime);
            }
        }

        [Test]
        public async Task TestDCC1_3_0_DK3MyPageTokenwithVaccines_ShouldBeValidIn1_3_0()
        {
            string prefixCompressedCose =

            var result = await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreNotEqual(TokenValidateResult.Invalid, result.ValidationResult);
            Assert.True(result.DecodedModel is DCCVersion_1_3_0.DCCPayload);
        }

        [Test]
        public async Task TestDCC1_3_0_DK3MyPageTokenWithVaccines_XDUIsPresentForEachTest()
        {
            // dob is a proper date
            string prefixCompressedCose =

            var result = await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            var resultDCC = result.DecodedModel as DCCVersion_1_3_0.DCCPayload;

            foreach (var vaccine in resultDCC.DCCPayloadData.DCC.Vaccinations)
            {
                Assert.NotNull(vaccine.CBSDefinedExpirationTime);
            }
        }

        [Test]
        public async Task TestDCC1_3_0_HC1HasNoXDUField_ShouldBeValidIn1_3_0()
        {
            // dob is a proper date
            string prefixCompressedCose =

            var result = await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreNotEqual(TokenValidateResult.Invalid, result.ValidationResult);

            var resultDCC = result.DecodedModel as DCCVersion_1_3_0.DCCPayload;
            Assert.Null(resultDCC.DCCPayloadData.DCC.Tests[0].CBSDefinedExpirationTime);
        }
    }
}